<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:task="http://www.springframework.org/schema/task"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
	   http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">

	<description>Spring MVC Configuration</description>

	<!--通知spring使用cglib而不是jdk的来生成代理方法 AOP可以拦截到Controller-->
	<aop:aspectj-autoproxy proxy-target-class="true" />

	<!-- 使用Annotation自动注册Bean，解决事物失效问题：在主容器中不扫描@Controller注解，在SpringMvc中只扫描@Controller注解。  -->
	<context:component-scan base-package="com.meixiang.beauty"><!-- base-package 如果多个，用“,”分隔 -->
		<!--<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>-->
	</context:component-scan>

	<!-- enable autowire -->
	<context:annotation-config />

	<bean id="springMethodInterceptor" class="com.meixiang.beauty.webapp.education.annotation.EducationLoginRequiredInterceptor" ></bean>
	<aop:config>
		<!--切入点-->
		<aop:pointcut id="loginPoint"
					  expression="execution(public * com.meixiang.beauty.webapp..*.*(..)) "/>
		<!--在该切入点使用自定义拦截器-->
		<aop:advisor pointcut-ref="loginPoint" advice-ref="springMethodInterceptor"/>
	</aop:config>

	<bean id="springVpnMethodInterceptor" class="com.meixiang.beauty.webapp.education.annotation.VpnLoginRequiredInterceptor" ></bean>
	<aop:config>
		<!--切入点-->
		<aop:pointcut id="loginVpnPoint"
					  expression="execution(public * com.meixiang.beauty.webapp..*.*(..)) "/>
		<!--在该切入点使用自定义拦截器-->
		<aop:advisor pointcut-ref="loginVpnPoint" advice-ref="springVpnMethodInterceptor"/>
	</aop:config>

	<!-- 加载配置属性文件 -->
	<context:property-placeholder ignore-unresolvable="true" location="classpath*:/system.properties" />

	<!-- 使用Annotation自动注册Bean,只扫描@Controller -->
	<context:component-scan base-package="com.meixiang.beauty" use-default-filters="false"><!-- base-package 如果多个，用“,”分隔 -->
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>

	<!-- 默认的注解映射的支持，org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping -->
	<mvc:annotation-driven content-negotiation-manager="contentNegotiationManager">
		<mvc:message-converters register-defaults="true">
			<!-- 将StringHttpMessageConverter的默认编码设为UTF-8 -->
			<bean class="org.springframework.http.converter.StringHttpMessageConverter">
				<constructor-arg value="UTF-8" />
			</bean>
			<!-- 将Jackson2HttpMessageConverter的默认格式化输出为false -->
			<bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
				<property name="supportedMediaTypes">
					<list><value>application/json;charset=UTF-8</value></list>
				</property>
				<property name="prettyPrint" value="false"/>
				<property name="objectMapper">
					<bean class="com.meixiang.beauty.common.mapper.JsonMapper"></bean>
				</property>
			</bean>
			<!-- 使用XML格式输出数据 -->
			<bean class="org.springframework.http.converter.xml.MarshallingHttpMessageConverter">
				<constructor-arg>
					<bean class="org.springframework.oxm.xstream.XStreamMarshaller">
						<property name="streamDriver">
							<bean class="com.thoughtworks.xstream.io.xml.StaxDriver"/>
						</property>
						<property name="annotatedClasses">
							<list>
								<value>com.meixiang.beauty.common.persistence.BaseEntity</value>
								<value>com.meixiang.beauty.common.supcan.treelist.TreeList</value>
								<value>com.meixiang.beauty.common.supcan.treelist.cols.Col</value>
								<value>com.meixiang.beauty.common.supcan.treelist.cols.Group</value>
							</list>
						</property>
					</bean>
				</constructor-arg>
				<property name="supportedMediaTypes" value="application/xml"></property>
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>

	<!-- REST中根据URL后缀自动判定Content-Type及相应的View -->
	<bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
		<property name="mediaTypes" >
			<map>
				<entry key="xml" value="application/xml"/>
				<entry key="json" value="application/json"/>
			</map>
		</property>
		<property name="ignoreAcceptHeader" value="true"/>
		<property name="favorPathExtension" value="true"/>
	</bean>

	<!-- 定义视图文件解析 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="${web.view.prefix}"/>
		<property name="suffix" value="${web.view.suffix}"/>
	</bean>

	<!-- 对静态资源文件的访问， 将无法mapping到Controller的path交给default servlet handler处理 -->
	<mvc:default-servlet-handler />

	<!-- 静态资源映射 -->
	<mvc:resources mapping="/static/**" location="/static/" cache-period="31536000"/>

	<!-- 上传文件拦截，设置最大上传文件大小   10M=10*1024*1024(B)=10485760 bytes 增加到100M -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="502400000" />
	</bean>

	<!-- 注解扫描包 -->
	<context:component-scan base-package="com.meixiang.beauty" />

	<!-- 开启注解 -->
	<mvc:annotation-driven/>

	<!--<import resource="runTimeTask.xml"></import>-->

</beans>